<% layout('../../layouts/auth-layout.eta', { title: 'Gaming room' }) %>

<article>
  <header>
    <h1>Gaming room</h1>
    ID: <strong><%= it.game.public_id %></strong> <br>
    You play against <strong><%= it.opponent.name %></strong>, as
    <strong><%= it.player.name %></strong>

    <br><br>
    Game is in <%= it.bestOf %> rounds<br>

    <hr>

    <strong><span id="countdown"></span></strong> <br>
    <span id="status" color="darkblue"></span>
    <span id="error" color="darkred"></span>
    <span id="ended" color="darkgreen"></span>
  </header>

  <form id="moves">
    <button id="move_0" name="0">Paper</button>
    <button id="move_1" name="1">Scissor</button>
    <button id="move_2" name="2">Rock</button>
  </form>

  <hr>

  <div id="gameState">

  </div>
</article>

<script>
  // UI Elements
  const countdownSpan = document.getElementById('countdown');
  const statusSpan = document.getElementById('status');
  const errorSpan = document.getElementById('error');
  const endedSpan = document.getElementById('ended');
  const gameState = document.getElementById('gameState');
  const makeMove = document.getElementById('moves');

  // Server provided values
  const id = '<%= it.game.public_id %>';
  const sseURI = '<%= it.uri %>';
  const source = new EventSource(sseURI + '/<%= it.game.public_id %>');

  // Values
  let interval;

  /**
   * Form Handler
   */
  makeMove.addEventListener('submit', event => {
    event.stopPropagation();
    event.preventDefault();

    const value = event.submitter.getAttribute('name');

    console.log(value);

    makeMove.childNodes.forEach(node => node.disabled = true);
    const uri = new URL(`/games/round/<%= it.game.public_id %>/${ value }`, window.location);
    const headers = new Headers();
    headers.set('Content-Type', 'application/json');
    fetch(uri, { method: 'POST', mode: 'cors', credentials: 'same-origin', headers })
      .then(response => {
        console.log(response);
        setTimeout(() => makeMove.childNodes.forEach(node => node.disabled = false), 750);
      })
      .catch(err => {
        console.error(err);
        setTimeout(() => makeMove.childNodes.forEach(node => node.disabled = false), 750);
      });
  });

  /**
   *
   */
  source.onerror = event => {
    if (!source.CLOSED) {
      clearInterval(interval);
      cleanElements();
      errorSpan.innerText = 'Cannot reach the server.';
      makeMove.childNodes.forEach(node => node.disabled = true);
    }
  };

  source.addEventListener('graceful-end', event => {
    renderGameState(event);
    const data = JSON.parse(event.data);
    makeMove.childNodes.forEach(node => node.disabled = true);

    clearInterval(interval);
    cleanElements();
    statusSpan.innerHTML = 'Status: Ended <br>';
    let str = '';
    if (data.winner === 0)
      str = 'it is a Draw';
    if (data.winner === 1)
      str = `it has been won by <%= it.player1.name %>`;
    if (data.winner === 2)
      str = `it has been won by <%= it.player2.name %>`;

    endedSpan.innerText = `Game has been ended and ${ str }`;
  });

  source.addEventListener('internal-error', event => {
    clearInterval(interval);
    cleanElements();
    statusSpan.innerText = 'Status: Error';
    endedSpan.innerText = 'Internal server error';
    makeMove.childNodes.forEach(node => node.disabled = true);
  });

  source.addEventListener('broadcast', renderGameState);

  // Countdown
  interval = setInterval(() => {
    const startTime = new Date('<%= it.game.timestamp %>');
    const endTime = new Date(startTime.getTime() + ((60 * Number('<%= it.maxTime %>')) * 1000));
    const timeLeft = Math.floor((endTime.getTime() - Date.now()) / 1000);
    const formatted = formatDate(timeLeft);

    countdownSpan.innerText = `Time: ${ formatted }`;

    if (timeLeft <= 0) {
      cleanElements();
      countdownSpan.innerText = '0';
      endedSpan.innerText = 'Game ended';
      clearInterval(interval);
    }
  }, 1000);

  /**
   *
   */
  function cleanElements() {
    countdownSpan.innerHTML = '';
    statusSpan.innerHTML = '';
    errorSpan.innerHTML = '';
    endedSpan.innerHTML = '';
  }

  function formatDate(time) {
    const minutes = Math.floor(time / 60);
    const seconds = time - (minutes * 60);

    let stringMinutes = minutes.toString();
    stringMinutes = stringMinutes.length === 1 ? `0${ stringMinutes }` : stringMinutes;

    let stringSeconds = seconds.toString();
    stringSeconds = stringSeconds.length === 1 ? `0${ stringSeconds }` : stringSeconds;

    return `${ stringMinutes }:${ stringSeconds }`;
  }

  function renderGameState(event) {
    const data = JSON.parse(event.data);
    const rounds = data.rounds;
    let htmlDATA = '';

    if (rounds?.length >= 1) {
      count = 1;
      const roundHTML = rounds
        .map(round => {
          const tr = `
          <tr>
            <td>${ count }</td>
            <td>${ round.moveP1 === 0 ? 'PAPER' : round.moveP1 === 1 ? 'SCISSOR' : 'ROCK' }</td>
            <td>${ round.moveP2 === 0 ? 'PAPER' : round.moveP2 === 1 ? 'SCISSOR' : 'ROCK' }</td>
          </tr>`;

          count++;
          return tr;
        })
        .join('');

      htmlDATA = `
      <table>
        <thead>
          <tr>
            <th scope="col">N.</th>
            <th scope="col"><strong><%= it.player1.name %></strong></th>
            <th scope="col"><%= it.player2.name %></th>
          </tr>
        </thead>
        <tbody>
          ${ roundHTML }
        </tbody>
      </table>
    `;
    } else htmlDATA = '<p>No rounds done yet</p>';

    gameState.innerHTML = htmlDATA;
  }
</script>
