<% layout('../../layouts/auth-layout.eta', { title: 'Waiting room' }) %>

<article>
  <header>
    <h1>Waiting room</h1>
    ID: <strong><%= it.room.uuid %></strong> <br>
    <span style="color: darkgreen;" id="found"></span>
    <span style="color: darkblue;" id="wait"></span>
    <span style="color: darkred;" id="not-found"></span>
    <span style="color: darkred;" id="error"></span>
  </header>
  <div>
    <span id="refresh"></span>
  </div>
</article>

<script type="module">
  // documentElements
  const timer = document.getElementById('timer');
  const spanFound = document.getElementById('found');
  const spanWait = document.getElementById('wait');
  const spanRefresh = document.getElementById('refresh');
  const spanNotFound = document.getElementById('not-found');
  const spanError = document.getElementById('error');

  let eventSource;

  // Source
  const urlTarget = new URL('<%= it.pathURI %>', location);
  if (!eventSource)
    eventSource = new EventSource(urlTarget);
  let count = 0;

  //
  await sleep(2000);

  eventSource.onopen = event => {
    cleanElements();

    spanWait.innerText = '... Opening connection';
  };

  eventSource.onerror = event => {
    cleanElements();
    spanError.innerText = 'Cannot reach the server at the moment.';
    eventSource.close();
  }

  eventSource.addEventListener('wait', async event => {
    cleanElements();
    count += 1;

    spanWait.innerText = `... Searching for opponent (${ count })`;
  });

  eventSource.addEventListener('not-found', async event => {
    cleanElements();

    spanNotFound.innerHTML = `
      <p color="darkred">
        Sorry, no opponent found !
      </p>
    `;

    spanRefresh.innerHTML = `
      <button onclick="window.location.reload()">
        Wait again ?
      </button>
    `;

    eventSource.close();
  });

  eventSource.addEventListener('found', async event => {
    cleanElements();

    spanFound.innerHTML = `
      <p>
        Game found! <br>
        <a href="/games/gaming">Go to the game</a>
      </p>
    `;

    setTimeout(() => {
      window.location.assign('/games/gaming');
    }, 1000);
    eventSource.close();
  });

  function cleanElements() {
    spanFound.innerHTML = '';
    spanWait.innerHTML = '';
    spanRefresh.innerHTML = '';
    spanNotFound.innerHTML = '';
  }
  // /**
  //  * Helpers
  //  */
  async function sleep(time) {
    return new Promise(resolve => {
      setTimeout(() => resolve(), time);
    });
  }
</script>
